name: Create Release

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize ]

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.2'

      - name: Determine PR base branch
        id: pr_info
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            echo "PR_BASE_BRANCH=$(jq -r '.pull_request.base.ref' "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV
          fi

      - name: Get commits since base branch
        id: get_commits
        if: steps.pr_info.outputs.PR_BASE_BRANCH
        run: |
          LAST_COMMIT=$(git log --pretty=format:"%H" -n 1)
          COMMITS=$(git log --pretty=format:"%s" ${{ steps.pr_info.outputs.PR_BASE_BRANCH }}..${LAST_COMMIT})
          echo "COMMITS=$COMMITS" >> $GITHUB_ENV

      - name: Build for Windows
        run: GOOS=windows GOARCH=amd64 go build -o sem4_aizo_proj1_mb_windows_amd64.exe .

      - name: Build for macOS (Intel)
        run: GOOS=darwin GOARCH=amd64 go build -o sem4_aizo_proj1_mb_darwin_amd64 .

      - name: Build for macOS (ARM)
        run: GOOS=darwin GOARCH=arm64 go build -o sem4_aizo_proj1_mb_darwin_arm64 .

      - name: Build for Linux
        run: GOOS=linux GOARCH=amd64 go build -o sem4_aizo_proj1_mb_linux_amd64 .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            ${{ steps.get_commits.outputs.COMMITS }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        id: upload-release-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_windows_amd64.exe
          asset_name: sem4_aizo_proj1_mb_windows_amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS (Intel) build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_darwin_amd64
          asset_name: sem4_aizo_proj1_mb_darwin_amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS (ARM) build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_darwin_arm64
          asset_name: sem4_aizo_proj1_mb_darwin_arm64
          asset_content_type: application/octet-stream

      - name: Upload Linux build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_linux_amd64
          asset_name: sem4_aizo_proj1_mb_linux_amd64
          asset_content_type: application/octet-stream
