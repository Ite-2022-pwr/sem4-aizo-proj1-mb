name: Create Release

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.2'

      - name: Determine PR base branch
        id: pr_info
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            echo "PR_BASE_BRANCH=$(jq -r '.pull_request.base.ref' "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV
          fi

      - name: Get previous release commit
        id: get_previous_release
        run: |
          PREVIOUS_RELEASE=$(git tag --sort=-creatordate | grep -m 1 '')
          echo "PREVIOUS_RELEASE=$PREVIOUS_RELEASE" >> $GITHUB_ENV

      - name: Get commits since previous release
        id: get_commits
        run: |
          COMMITS=$(git log --pretty=format:"%s" ${{ env.PREVIOUS_RELEASE }}..HEAD --grep="release")
          echo "COMMITS=$COMMITS" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        if: steps.get_commits.outputs.COMMITS != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: ${{ steps.get_commits.outputs.COMMITS }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_windows_amd64.exe
          asset_name: sem4_aizo_proj1_mb_windows_amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS (Intel) build
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_darwin_amd64
          asset_name: sem4_aizo_proj1_mb_darwin_amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS (ARM) build
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_darwin_arm64
          asset_name: sem4_aizo_proj1_mb_darwin_arm64
          asset_content_type: application/octet-stream

      - name: Upload Linux build
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sem4_aizo_proj1_mb_linux_amd64
          asset_name: sem4_aizo_proj1_mb_linux_amd64
          asset_content_type: application/octet-stream
